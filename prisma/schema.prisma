// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// MULTI-TENANT CORE MODELS
// ============================================================================

model Tenant {
  id        String   @id @default(cuid())
  name      String
  subdomain String   @unique
  domain    String?
  plan      Plan     @default(free)
  status    String   @default("active") // active, suspended, deleted
  
  // Billing
  stripeCustomerId String?
  stripeSubscriptionId String?
  
  // Plan limits
  taskCapFree      Int      @default(50)
  taskCapPremium   Int      @default(500)
  taskCapPremiumPlus Int   @default(-1) // -1 = unlimited
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users         User[]
  memberships   Membership[]
  teams         Team[]
  tasks         Task[]
  billings      Billing[]
  usageCounter  UsageCounter?
  invites       Invite[]
  activities    TaskActivity[]

  @@index([subdomain])
  @@index([plan])
  @@index([status])
}

enum Plan {
  free
  premium
  premium_plus
}

// ============================================================================
// AUTHENTICATION & USERS
// ============================================================================

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  password      String?    // hashed password for credentials provider
  image         String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts   Account[]
  sessions   Session[]
  memberships Membership[]
  teamMemberships TeamMembership[]
  tasks      Task[]
  invites    Invite[]
  tenants    Tenant[]

  @@index([email])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ============================================================================
// TENANT MEMBERSHIPS & TEAMS
// ============================================================================

model Membership {
  id        String   @id @default(cuid())
  userId    String
  tenantId  String
  role      Role     @default(member)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
  @@index([tenantId])
  @@index([userId])
}

enum Role {
  owner
  admin
  member
}

// Teams (Premium Plus only)
model Team {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  description String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  members   TeamMembership[]
  tasks     Task[]

  @@index([tenantId])
}

model TeamMembership {
  id        String   @id @default(cuid())
  userId    String
  teamId    String
  role      TeamRole @default(member)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@index([teamId])
  @@index([userId])
}

enum TeamRole {
  manager
  member
}

// ============================================================================
// TASKS
// ============================================================================

model Task {
  id        String   @id @default(cuid())
  tenantId  String
  title     String
  description String?
  completed Boolean  @default(false)
  dueDate   DateTime?
  
  // Optional team association (Premium Plus)
  teamId    String?
  createdBy String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  team      Team?    @relation(fields: [teamId], references: [id], onDelete: SetNull)
  creator   User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  activities TaskActivity[]

  @@index([tenantId])
  @@index([teamId])
  @@index([createdBy])
  @@index([completed])
}

// Audit trail for tasks
model TaskActivity {
  id        String   @id @default(cuid())
  tenantId  String
  taskId    String?
  action    String   // created, updated, completed, deleted
  userId    String?
  details   String?  @db.Text
  
  createdAt DateTime @default(now())

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([taskId])
  @@index([createdAt])
}

// ============================================================================
// BILLING & USAGE
// ============================================================================

model Billing {
  id        String   @id @default(cuid())
  tenantId  String   @unique
  priceId   String?
  stripeSubscriptionId String?
  status    String   @default("inactive") // active, cancelled, past_due
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  canceledAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([status])
}

model UsageCounter {
  id        String   @id @default(cuid())
  tenantId  String   @unique
  taskCount Int      @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
}

// ============================================================================
// INVITES
// ============================================================================

model Invite {
  id        String   @id @default(cuid())
  tenantId  String
  email     String
  role      Role     @default(member)
  token     String   @unique
  expiresAt DateTime
  acceptedAt DateTime?
  acceptedBy String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [acceptedBy], references: [id], onDelete: SetNull)

  @@unique([tenantId, email])
  @@index([tenantId])
  @@index([token])
  @@index([expiresAt])
}
